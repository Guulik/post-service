// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	model "posts/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepoPosts is a mock of RepoPosts interface.
type MockRepoPosts struct {
	ctrl     *gomock.Controller
	recorder *MockRepoPostsMockRecorder
}

// MockRepoPostsMockRecorder is the mock recorder for MockRepoPosts.
type MockRepoPostsMockRecorder struct {
	mock *MockRepoPosts
}

// NewMockRepoPosts creates a new mock instance.
func NewMockRepoPosts(ctrl *gomock.Controller) *MockRepoPosts {
	mock := &MockRepoPosts{ctrl: ctrl}
	mock.recorder = &MockRepoPostsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoPosts) EXPECT() *MockRepoPostsMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockRepoPosts) CreatePost(post model.Post) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockRepoPostsMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockRepoPosts)(nil).CreatePost), post)
}

// GetAllPosts mocks base method.
func (m *MockRepoPosts) GetAllPosts(limit, offset int) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", limit, offset)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockRepoPostsMockRecorder) GetAllPosts(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockRepoPosts)(nil).GetAllPosts), limit, offset)
}

// GetPostById mocks base method.
func (m *MockRepoPosts) GetPostById(id int) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", id)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockRepoPostsMockRecorder) GetPostById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockRepoPosts)(nil).GetPostById), id)
}

// MockRepoComments is a mock of RepoComments interface.
type MockRepoComments struct {
	ctrl     *gomock.Controller
	recorder *MockRepoCommentsMockRecorder
}

// MockRepoCommentsMockRecorder is the mock recorder for MockRepoComments.
type MockRepoCommentsMockRecorder struct {
	mock *MockRepoComments
}

// NewMockRepoComments creates a new mock instance.
func NewMockRepoComments(ctrl *gomock.Controller) *MockRepoComments {
	mock := &MockRepoComments{ctrl: ctrl}
	mock.recorder = &MockRepoCommentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoComments) EXPECT() *MockRepoCommentsMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockRepoComments) CreateComment(comment model.Comment) (model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockRepoCommentsMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockRepoComments)(nil).CreateComment), comment)
}

// GetCommentsByPost mocks base method.
func (m *MockRepoComments) GetCommentsByPost(postId, limit, offset int) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPost", postId, limit, offset)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPost indicates an expected call of GetCommentsByPost.
func (mr *MockRepoCommentsMockRecorder) GetCommentsByPost(postId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPost", reflect.TypeOf((*MockRepoComments)(nil).GetCommentsByPost), postId, limit, offset)
}

// GetRepliesOfComment mocks base method.
func (m *MockRepoComments) GetRepliesOfComment(commentId int) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesOfComment", commentId)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesOfComment indicates an expected call of GetRepliesOfComment.
func (mr *MockRepoCommentsMockRecorder) GetRepliesOfComment(commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesOfComment", reflect.TypeOf((*MockRepoComments)(nil).GetRepliesOfComment), commentId)
}
