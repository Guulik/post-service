package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"log/slog"
	"posts/graph"
	"posts/internal/constants"
	"posts/internal/lib/pagination"
	e "posts/internal/lib/response_error"
	"posts/internal/model"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post model.InputPost) (*model.Post, error) {
	newPost, err := r.PostsService.CreatePost(ctx, post.FromInput())
	if err != nil {
		slog.Error(constants.CreatingPostError)
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	return &newPost, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, page *int, pageSize *int) ([]*model.Comment, error) {
	limit, offset, err := pagination.GetLimitAndOffset(page, pageSize)
	if err != nil {
		slog.Error(constants.WrongPageError)
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	if obj.ID <= 0 {
		slog.Error(constants.WrongIdError, obj.ID)
		respErr := e.ResponseError{
			Message: constants.WrongIdError,
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	comments, err := r.CommentsService.GetCommentsByPost(ctx, obj.ID, limit, offset)
	if err != nil {
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	return comments, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, page *int, pageSize *int) ([]*model.Post, error) {

	limit, offset, err := pagination.GetLimitAndOffset(page, pageSize)
	if err != nil {
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	posts, err := r.PostsService.GetAllPosts(ctx, limit, offset)
	if err != nil {
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	return posts, nil
}

// GetPostByID is the resolver for the GetPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id int) (*model.Post, error) {
	if id <= 0 {
		slog.Error(constants.WrongIdError, id)
		respErr := e.ResponseError{
			Message: constants.WrongIdError,
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	post, err := r.PostsService.GetPostById(ctx, id)
	if err != nil {
		var respErr e.ResponseError
		respErr = e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		if err.Error() == constants.NotFoundType {
			respErr = e.ResponseError{
				Message: err.Error(),
				Type:    constants.NotFoundType,
			}
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	return &post, nil
}

// Mutation returns graphql.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Post returns graphql.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

// Query returns graphql.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
