package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"posts/graph"
	"posts/internal/model"
)

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.InputComment) (*model.Comment, error) {
	newComment, err := r.CommentsService.CreateComment(ctx, input.FromInput())
	if err != nil {
		//TODO: handle Error
	}

	if err = r.CommentsObservers.NotifyObservers(newComment.Post, newComment); err != nil {
		//TODO: handle Error
	}

	return &newComment, nil
}

// GetReplies is the resolver for the GetReplies field.
func (r *queryResolver) GetReplies(ctx context.Context, commentID int) ([]*model.Comment, error) {
	comments, err := r.CommentsService.GetRepliesOfComment(ctx, commentID)
	if err != nil {
		//TODO: handle error
	}

	return comments, nil
}

// CommentsSubscription is the resolver for the CommentsSubscription field.
func (r *subscriptionResolver) CommentsSubscription(ctx context.Context, postID int) (<-chan *model.Comment, error) {
	id, ch, err := r.CommentsObservers.CreateObserver(postID)

	if err != nil {
		//TODO: handle error
	}

	go func() {
		<-ctx.Done()
		err = r.CommentsObservers.DeleteObserver(id, postID)
		if err != nil {
			// TODO: error log
		}
	}()

	return ch, nil
}

// Subscription returns graphql.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
