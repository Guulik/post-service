package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"log/slog"
	"posts/graph"
	"posts/internal/constants"
	e "posts/internal/lib/response_error"
	"posts/internal/model"
)

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.InputComment) (*model.Comment, error) {
	if input.Post <= 0 {
		slog.Error(constants.WrongIdError, input.Post)
		respErr := e.ResponseError{
			Message: constants.WrongIdError,
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	if len(input.Content) >= constants.MaxContentLength {
		slog.Error(constants.TooLongContentError, len(input.Content))
		err := e.ResponseError{
			Message: constants.TooLongContentError,
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: err.Extensions(),
		}
	}
	newComment, err := r.CommentsService.CreateComment(ctx, input.FromInput())
	if err != nil {
		var respErr e.ResponseError
		respErr = e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		if err.Error() == constants.CommentsNotAllowedError {
			respErr = e.ResponseError{
				Message: err.Error(),
				Type:    constants.BadRequestType,
			}
		}
		if err.Error() == constants.PostNotFoundError {
			respErr = e.ResponseError{
				Message: err.Error(),
				Type:    constants.NotFoundType,
			}
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	if err = r.CommentsObservers.NotifyObservers(newComment.Post, newComment); err != nil {
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	return &newComment, nil
}

// GetReplies is the resolver for the GetReplies field.
func (r *queryResolver) GetReplies(ctx context.Context, commentID int) ([]*model.Comment, error) {
	if commentID <= 0 {
		slog.Error(constants.WrongIdError, commentID)
		respErr := e.ResponseError{
			Message: constants.WrongIdError,
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}
	comments, err := r.CommentsService.GetRepliesOfComment(ctx, commentID)
	if err != nil {
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	return comments, nil
}

// CommentsSubscription is the resolver for the CommentsSubscription field.
func (r *subscriptionResolver) CommentsSubscription(ctx context.Context, postID int) (<-chan *model.Comment, error) {
	if postID <= 0 {
		slog.Error(constants.WrongIdError, postID)
		respErr := e.ResponseError{
			Message: constants.WrongIdError,
			Type:    constants.BadRequestType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}
	id, ch, err := r.CommentsObservers.CreateObserver(postID)

	if err != nil {
		respErr := e.ResponseError{
			Message: err.Error(),
			Type:    constants.InternalErrorType,
		}
		return nil, &gqlerror.Error{
			Extensions: respErr.Extensions(),
		}
	}

	go func() {
		<-ctx.Done()
		err = r.CommentsObservers.DeleteObserver(id, postID)
		if err != nil {
			slog.Error("failed to Delete observer")
			return
		}
	}()

	return ch, nil
}

// Subscription returns graphql.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
